{
  // ================================================================
  // 基础 | Basic
  // ================================================================
  "files.eol": "\n",
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "diffEditor.ignoreTrimWhitespace": false,
  // 智能搜索
  "search.smartCase": true,
  // 全局搜索时排除掉一些指定目录 | 提升检索速度
  "search.exclude": {
    "**/.git": true,
    "**/.github": true,
    "**/.nuxt": true,
    "**/.output": true,
    "**/.pnpm": true,
    "**/.vscode": true,
    "**/.yarn": true,
    "**/bower_components": true,
    "**/dist/**": true,
    "**/logs": true,
    "**/node_modules": true,
    "**/out/**": true,
    "**/package-lock.json": true,
    "**/pnpm-lock.yaml": true,
    "**/tmp": true,
    "**/yarn.lock": true
  },

  // ================================================================
  // 窗口 | Window and Workbench
  // ================================================================
  // 是否使用原生标签页
  "window.nativeTabs": false,
  // 整体编辑器缩放比例
  "window.zoomLevel": 0.5,
  "window.titleBarStyle": "custom",
  // 搜索项居中
  "window.commandCenter": true,
  // 对话框外观
  "window.dialogStyle": "custom",
  "window.newWindowDimensions": "offset",

  "workbench.iconTheme": "vscode-icons",
  "workbench.productIconTheme": "icons-carbon",
  "workbench.colorTheme": "Panda Syntax",
  // 是否开启根据白天/黑夜自动切换主题 | 需要先配置好对应的主题
  "window.autoDetectColorScheme": false,
  // 白天/夜晚使用的主题
  "workbench.preferredLightColorTheme": "Panda Syntax",
  "workbench.preferredDarkColorTheme": "Vitesse Dark",
  // 类似 mac 的台前调度, 是否只显示一个 tab
  "workbench.editor.showTabs": false,
  "workbench.editor.showIcons": false,
  "workbench.list.smoothScrolling": true,
  "workbench.editor.closeOnFileDelete": true,
  // tab 标签的关闭图标是否显示
  "workbench.editor.tabCloseButton": "off",
  "workbench.editor.limit.enabled": true,
  // 控制当超出可用空间时, tab 是否换行或者显示滚动条
  "workbench.editor.wrapTabs": false,
  // 设置最大显示 tab title 的个数
  "workbench.editor.limit.value": 5,
  // 应用于每个编辑组
  "workbench.editor.limit.perEditorGroup": true,
  "workbench.tree.expandMode": "singleClick",
  "workbench.tree.indent": 10,
  "workbench.startupEditor": "newUntitledFile",

  // ================================================================
  // 编辑区 | Editor
  // ================================================================
  "editor.tabSize": 2,
  "editor.fontSize": 13.5,
  "editor.lineHeight": 1.6,
  // "editor.fontWeight": 400,
  // 不设置默认使用系统字体
  "editor.fontFamily": "JetBrains Mono, IBM Plex Mono, Input Mono, Fira Code, monospace",
  // 右侧小地图显示大小设置
  "editor.minimap.size": "fit",
  // 行号显示
  "editor.lineNumbers": "on",
  "editor.detectIndentation": false,
  "editor.accessibilitySupport": "off",
  // 突出当前行高亮方式
  "editor.renderLineHighlight": "line",
  // 使光标更加丝滑的移动
  "editor.cursorSmoothCaretAnimation": "on",
  // 光标闪烁动画
  "editor.cursorBlinking": "blink",
  "editor.smoothScrolling": true,
  "editor.find.addExtraSpaceOnTop": false,
  "editor.fontLigatures": "'ss01', 'ss02', 'ss03', 'ss06', 'zero'",
  "editor.glyphMargin": true,
  "editor.guides.bracketPairs": "active",
  "editor.inlineSuggest.enabled": true,
  // 是否替换 alt 的多光标映射
  "editor.multiCursorModifier": "alt",
  // 渲染空格字符的方式
  "editor.renderWhitespace": "selection",
  "editor.suggestSelection": "first",
  "editor.unicodeHighlight.invisibleCharacters": false,
  // 括号着色
  "editor.bracketPairColorization.enabled": true,
  "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
  // 是否开启粘性滚动
  "editor.stickyScroll.enabled": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": false,
    // 允许 ESlint 在保存时自动修复
    "source.fixAll.eslint": true
  },
  // 自定义代码编辑区内容
  "editor.tokenColorCustomizations": {
    "[Vitesse Dark]": {
      // 注释颜色更改
      "comments": "#909090"
    },
    "[Ayu Mojave]": {
      "comments": "#a2aaa2"
    },
    "[One Dark Pro Darker]": {
      "comments": "#a2aaa2"
    },
    "[Moegi Dark Vitesse]": {
      "comments": "#a1a7a1"
    },
    "[GitHub Dark Dimmed]": {
      "comments": "#adb5ad"
    },
    "[Panda Syntax]": {
      "comments": "#adb5ad",
      "textMateRules": [
        // 更改编辑器中 html 配色方案
        {
          "scope": ["entity.name.tag", "entity.name.tag.css", "support.class.component"],
          "settings": {
            "foreground": "#ed9cc2"
          }
        },
        {
          "scope": "meta.tag.structure.any.html, meta.tag.other.html, entity.name.tag.html, meta.tag.metadata.script.html, entity.name.tag.jade",
          "settings": {
            "foreground": "#ed9cc2"
          }
        },
        {
          "scope": "source.vue, entity.name.tag.pug, meta.tag.other",
          "settings": {
            "foreground": "#ed9cc2"
          }
        }
      ]
    },
    "[Moegi Dark]": {
      "comments": "#909090",
      "textMateRules": []
    },
    // 文本样式调整
    "textMateRules": [
      // 注释样式: 正常或者斜体
      {
        "name": "Comment Italics",
        "scope": ["comment", "punctuation.definition.comment"],
        "settings": {
          "fontStyle": ""
        }
      }
      // 设置关键词粗体
      // {
      //   "name": "Keyword Bold",
      //   "scope": ["keyword", "storage.type", "storage.modifier"],
      //   "settings": {
      //     "fontStyle": "bold"
      //   }
      // }
    ]
  },
  // 自定义主题样式
  "workbench.colorCustomizations": {
    // note: active: 活动状态 | inactive: 非活动状态 | foreground: 前景色 | background: 背景色 | border: 边框
    "[Panda Syntax]": {
      // todo
      "badge.background": "#aaaaaa",
      "badge.foreground": "#000000",
      "quickInput.background": "#202020bf",
      "widget.shadow": "#0000008f",
      "titleBar.border": "#aaaaaa6f",
      "tab.border": "#aaaaaa6f",
      "tab.activeBorderTop": "#86f6de",
      "tab.activeBorder": "#00000000",
      "textCodeBlock.background": "#aaaaaa3f",
      "editorWidget.foreground": "#cccccc",
      "editorCursor.background": "#ffffff",
      "editor.selectionBackground": "#aaaaaa6f",
      "editor.selectionHighlightBackground": "#aaaaaa2f",
      "editor.wordHighlightBackground": "#aaaaaa2f",
      // 建议/智能补全提示
      "editorSuggestWidget.selectedForeground": "#ffffffff",
      "editorSuggestWidget.selectedBackground": "#aaaaaa2f",
      "editorHoverWidget.background": "#202020ef",
      "editorWidget.background": "#202020ef",
      "scrollbarSlider.activeBackground": "#aaaaaa2f",
      "scrollbarSlider.background": "#aaaaaa2f",
      "scrollbarSlider.hoverBackground": "#aaaaaa2f"
    },
    // hint: 特别暗环境可以开起来这个, 最近发现 dark mode 主题背景太暗的话是有点费眼睛的
    "[-Panda Syntax][Vitesse Dark]": {
      //  Basic | 基础
      // 调整组件之间间距大小的边框
      "sash.hoverBorder": "#66c0ad",
      // 输入框
      "input.background": "#1a1d22",
      // ctrl+p 调出来的全局面板
      "quickInput.background": "#12151aaf",
      // 焦点元素整体边框颜色 | 大部分组件窗口都适用
      "focusBorder": "#aaaaaa5f",
      // git 忽略文件字体颜色
      "gitDecoration.ignoredResourceForeground": "#aaaaaa5f",
      // 文本中代码块的颜色
      "textCodeBlock.background": "#aaaaaa3f",
      // 编辑区域下面可以调出来的面板(包含终端), 测试了下貌似会影响到终端颜色, 终端未设置的前提下
      "panel.background": "#13151b",
      // 小组件阴影 | 查找/替换/全局面板
      "widget.shadow": "#00000033",
      // 与滚动条相关的边框阴影设置
      "scrollbar.shadow": "#050505",
      "scrollbarSlider.activeBackground": "#aaaaaa2f",
      "scrollbarSlider.background": "#aaaaaa2f",
      "scrollbarSlider.hoverBackground": "#aaaaaa2f",
      "panel.border": "#abbcab50",
      // 文件链接
      // "textLink.activeForeground": "#ff8787",
      // "textLink.foreground": "#ff8787cc",

      // Window | 窗口 | 顶部
      "titleBar.activeForeground": "#cccccc",
      "titleBar.inactiveForeground": "#cccccc",
      "titleBar.activeBackground": "#12151a",
      "titleBar.inactiveBackground": "#12151a",
      "titleBar.border": "#aaaaaa5f",

      // Activity | 活动栏 | 最左侧的那一列
      "activityBar.background": "#12151a",
      "activityBar.border": "#aaaaaa5f",
      // 活动中的图标前景色
      "activityBar.foreground": "#dddddd",
      "activityBar.inactiveForeground": "#dddddd5f",
      "activityBar.activeBorder": "#66c0ad",
      "activityBarBadge.foreground": "#000000",
      "activityBarBadge.background": "#77dac5",

      // Explorer | 侧边栏 (文件/资源管理器)
      "sideBar.background": "#12151a",
      "sideBar.border": "#aaaaaa5f",
      "sideBarSectionHeader.border": "#aaaaaa5f",
      // 第一级菜单背景色
      "sideBarSectionHeader.background": "#12151a",
      // "list.focusForeground": "#ff0000",
      // "list.activeSelectionForeground": "#ffffff",
      // "list.focusAndSelectionOutline": "#ff0000",
      "list.hoverBackground": "#6666661f",
      "list.focusBackground": "#6666661f",
      "list.activeSelectionBackground": "#aaaaaa1f",
      "list.inactiveSelectionBackground": "#aaaaaa1f",
      "list.inactiveFocusBackground": "#00000000",

      // Tab | 标签 | 顶部
      "tab.activeBackground": "#1a1d22",
      "tab.inactiveBackground": "#12151a",
      // "tab.activeBorderTop": "#4d9375",
      "tab.activeBorderTop": "#66c0ad",
      "tab.activeBorder": "#00000000",
      "tab.hoverBackground": "#1a1d22",
      "tab.border": "#aaaaaa5f",
      // tab 背后整个 tab 条的背景色
      "editorGroupHeader.tabsBackground": "#12151a",

      // Breadcrumb | 面包屑 | 顶部
      "breadcrumb.background": "#1a1d22",
      "breadcrumb.activeSelectionForeground": "#66c0ad",
      "breadcrumbPicker.background": "#12151abf",

      // Editor | 编辑器 | 中间
      "editor.background": "#1a1d22",
      "editorGroup.border": "#abbcab2f",
      "editorLineNumber.foreground": "#cccccc5f",
      "editorLineNumber.activeForeground": "#cccccc",
      "editor.selectionBackground": "#aaaaaa4f",
      "editor.selectionHighlightBackground": "#aaaaaa1f",
      "editor.wordHighlightBackground": "#aaaaaa1f",
      // 光标覆盖之后内容的颜色
      "editorCursor.background": "#000000",
      // 与选中内容一致的, 高亮其边框
      // "editor.selectionHighlightBorder": "#ffffff3f",
      // 小组件背景颜色 | 提示/查找/替换
      "editorWidget.background": "#12151aef",
      // 鼠标悬停在内容上提示的背景色
      "editorHoverWidget.background": "#12151aef",
      // 智能提示面板 | 如果未设置就使用上面小组件的
      // "editorSuggestWidget.background": "#0a0a0a",
      // "editorSuggestWidget.selectedBackground": "#ff0000",
      "editorSuggestWidget.selectedForeground": "#ffffffff",
      "editorSuggestWidget.selectedBackground": "#aaaaaa3f",
      "editor.lineHighlightBackground": "#aaaaaa1f",
      // 粘性滚动代码背景色设置
      "editorStickyScroll.background": "#1a1d22",
      "editorStickyScrollHover.background": "#aaaaaa1f",
      // 代码参数提示
      // "editorInlayHint.background": "#ffffff10",
      // "editorInlayHint.foreground": "#ffffff6f",

      // Terminal | 终端 | 编辑区底部
      // todo: 想设置 terminal 失去焦点时的背景色之类的, 没有找到, 后面看看
      // 选择背景色
      "terminal.selectionBackground": "#d1d1d130",
      // Badge: 小型的信息标签, 测试只有终端这边的有反应, 活动栏需要单独设置, 有可能时因为原主题设置了活动栏的原因?
      "badge.background": "#aaaaaa5f",
      "badge.foreground": "#cccccc"
    }
  },

  // ================================================================
  // 终端 | Terminal
  // ================================================================
  // 定义在 macOS 上运行的终端应用程序
  "terminal.external.osxExec": "iTerm.app",
  // hint: 开启GPU加速后, 终端速度明显快多了
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.fontSize": 14,
  // 终端字体 | 不设置的话默认使用编辑器字体
  "terminal.integrated.fontFamily": "Hack Nerd Font Mono, monospace",
  // "terminal.integrated.fontFamily": "Input Mono, Hack Nerd Font Mono, monospace",
  // "terminal.integrated.fontFamily": "JetBrains Mono, Hack Nerd Font Mono,monospace",
  "terminal.integrated.confirmOnKill": "never",
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.lineHeight": 1.1,
  "terminal.integrated.cursorStyle": "line",
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.persistentSessionReviveProcess": "never",
  "terminal.integrated.tabs.enabled": true,
  "terminal.integrated.tabs.location": "right",

  // ================================================================
  // vim
  // ================================================================
  // 设置 leader 键为空格
  "vim.leader": "<space>",
  // hint: 体验下崔大的 vim.leap 插件
  "vim.leap": true,
  // 双向搜索
  "vim.leapBidirectionalSearch": true,
  "vim.leapShowMarkerPosition": "target",
  "vim.leapCaseSensitive": false,
  // <leader><leader> s <char>: 全文搜索字符
  // <leader><leader> f <char>: 当前光标往下搜索
  "vim.easymotion": false,
  // 使用系统剪切板 cv -> yp
  "vim.useSystemClipboard": true,
  "vim.incsearch": true,
  "vim.useCtrlKeys": false,
  "vim.hlsearch": true,
  "vim.surround": true,
  "vim.sneak": true,
  // 设置 vim 不接管某些快捷键
  "vim.handleKeys": {
    "<C-a>": false,
    "<C-f>": false,
    // 作为一位合格的 cv 工程师, 我的主力按键怎么能被 vim 接管, 达咩！
    "<C-c>": false,
    "<C-v>": false
  },
  // 插入/写入模式 | 按键功能映射
  "vim.insertModeKeyBindings": [],
  // 按下 operation (d/y/c) 后等待的模式 | pending
  "vim.operatorPendingModeKeyBindings": [
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["L"],
      "after": ["g", "_"]
    }
  ],
  // 可视/选择模式 | 按键功能映射
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["enter"],
      "after": ["a", "f"]
    },
    // 其实就是用了个小技巧让我们在可视模式下粘贴时寄存器内数据保持一致:
    // 一般来说如果在可视模式选中后 p 操作会将 p 所覆盖的东西复制到寄存器中, 导致后续再 p 就不是我们想粘贴的内容了
    // 这里在 p 后执行 gv（选中粘贴的数据）并 y（复制）
    {
      "before": ["p"],
      "after": ["p", "g", "v", "y"]
    },
    {
      "before": ["K"],
      "after": ["5", "k"]
    },
    {
      "before": ["J"],
      "after": ["5", "j"]
    },
    // 行首/行尾移动
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["L"],
      "after": ["g", "_"]
    }
  ],
  // 普通模式 | 按键功能映射
  "vim.normalModeKeyBindingsNonRecursive": [
    // 资源管理区 | Explorer
    // 侧边栏的显示和隐藏的快捷键 | explorer
    {
      "before": ["leader", "e"],
      "commands": ["workbench.action.toggleSidebarVisibility"]
    },
    // 创建文件
    {
      "before": ["leader", "a"],
      "commands": ["explorer.newFile"]
    },
    // 创建文件夹
    {
      "before": ["leader", "A"],
      "commands": ["explorer.newFolder"]
    },

    // 标签区 | Tab
    // hack: tab 标签左右切换: 注意若遇到软件设置/插件说明等 tab 标签时会无效, 可用系统快捷键 cmd + shift + [] 切换
    // {
    //   "before": ["H"],
    //   "commands": ["workbench.action.previousEditor"]
    // },
    // {
    //   "before": ["L"],
    //   "commands": ["workbench.action.nextEditor"]
    // },

    // 编辑区 | Editor
    // 向上/下寻找当前文件出现的提示提示/警告/错误
    {
      "before": ["leader", "k"],
      "commands": ["editor.action.marker.prev"]
    },
    {
      "before": ["leader", "j"],
      "commands": ["editor.action.marker.next"]
    },
    // 类似 wildfire.vim 但是不能选择包含块里面的内容, 有点可惜
    {
      "before": ["enter"],
      "after": ["v", "a", "f"]
    },
    // 通过设置一个自定义占位符, 然后按"两次空格"来快速定位更改 | placeholder | 进入 insert 模式
    // bug: 找不到这个占位符的时候也会执行 c4l 就把当前光标所在的4个字符删除了
    // {
    //   "before": ["leader", "leader"],
    //   "after": [
    //     "/",
    //     "<",
    //     "+",
    //     "+",
    //     ">",
    //     "<cr>",
    //     ":",
    //     "n",
    //     "o",
    //     "h",
    //     "l",
    //     "<cr>",
    //     "\"",
    //     "_",
    //     "c",
    //     "4",
    //     "l"
    //   ]
    // },
    // 解决自动换行后进行光标移动一次跳过多行的问题
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    // 控制光标向上/下滚动指定行 | 并顺便调整到屏幕中间
    {
      "before": ["K"],
      "after": ["8", "g", "k", "z", "z"]
    },
    {
      "before": ["J"],
      "after": ["8", "g", "j", "z", "z"]
    },
    // n/N vim 查找后上下匹配项切换 | 并调整显示行为屏幕中心
    {
      "before": ["n"],
      "after": ["n", "z", "z"]
    },
    {
      "before": ["N"],
      "after": ["N", "z", "z"]
    },
    // u 的 redo 操作
    {
      "before": ["U"],
      "after": ["<c-r>"]
    },
    // 右/下分屏
    {
      "before": ["s", "l", ";"],
      "commands": [":vsplit"]
    },
    {
      "before": ["s", "j", ";"],
      "commands": [":split"]
    },
    // 返回上一次操作的位置
    {
      "before": ["g", "k"],
      // "commands": ["workbench.action.navigateBack"]
      "after": ["<c-o>"]
    },
    // gk 的 redo
    {
      "before": ["g", "j"],
      // "commands": ["workbench.action.navigateBack"]
      "after": ["<c-i>"]
    },
    // 行首/行尾移动
    {
      "before": ["H"],
      "after": ["^"]
    },
    {
      "before": ["L"],
      "after": ["g", "_"]
    },
    // 保存但不格式化
    {
      "before": ["leader", "w"],
      "commands": ["workbench.action.files.saveWithoutFormatting"]
    },
    // 取消查找后的光标高亮
    {
      "before": ["leader", ";"],
      "commands": [":noh"]
    },
    // 保存文件
    {
      "before": ["leader", "s"],
      "commands": ["workbench.action.files.save"]
    },
    // 关闭文件
    {
      "before": ["leader", "q"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    {
      "before": ["Q"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    // 进入定义文件位置中
    // {
    //   "before": ["leader", "f"],
    //   "after": ["g", "f"]
    // }
    // 光标跳转到前面的函数开始处 | 如果光标在函数体内, 那就是该函数的开始处
    // {
    //   "before": ["leader", "["],
    //   "after": ["[", "{"]
    // },

    // 终端区 | Terminal
    // 光标由 editor 聚焦至 terminal
    {
      "before": ["leader", "t"],
      "commands": ["workbench.action.terminal.focus"]
    }
  ],
  // vim keep english in normal（中文切换到普通/NORMAL模式时自动变成英文输入）
  // hint: 通过 Rime 的配置方案解决了
  // bug: 使用操作符 (如：ciw），删除当前光标所在单词并进入 INSERT 模式, 此时光标应该从方块变成细条光束, 但结果仍然保持方块, 直到再次输入字符时光标才会切换为细条光束
  // 对于我来说, 光标状态的显示是我判断模式的根本, 如果光标状态与模式不同时, 可能会产生一些错误的命令输入, 体验上来说就很不友好
  // 是否启用自动切换
  "vim.autoSwitchInputMethod.enable": false,
  // normal 模式下需要切换的输入法
  "vim.autoSwitchInputMethod.defaultIM": "com.apple.keylayout.ABC",
  // 获取当前输入法的命令
  "vim.autoSwitchInputMethod.obtainIMCmd": "/usr/local/bin/im-select",
  // 切换输入法的命令，{im} 代表要切换的输入法名称（其实就是设置的 defaultIM）
  "vim.autoSwitchInputMethod.switchIMCmd": "/usr/local/bin/im-select {im}",

  // ================================================================
  // git
  // ================================================================
  "git.confirmSync": false,
  "git.ignoreRebaseWarning": true,
  "gitlens.menus": {
    "editor": {
      "blame": false,
      "clipboard": true,
      "compare": true,
      "history": false,
      "remote": false
    },
    "editorGroup": {
      "blame": true,
      "compare": false
    },
    "editorTab": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true
    },
    "explorer": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": true
    },
    "scm": {
      "authors": true
    },
    "scmGroup": {
      "compare": true,
      "openClose": true,
      "stash": true
    },
    "scmGroupInline": {
      "stash": true
    },
    "scmItem": {
      "clipboard": true,
      "compare": true,
      "history": true,
      "remote": false,
      "stash": true
    }
  },

  // ================================================================
  // better comments
  // ================================================================
  "better-comments.tags": [
    // hint: 功能提示
    {
      "tag": "HINT",
      "color": "#fff",
      "backgroundColor": "#0bba54"
    },
    // note: 一般用于比较难理解的代码/功能, 添加描述
    {
      "tag": "NOTE",
      "color": "#fff",
      "backgroundColor": "#3498db"
    },
    // todo: 表示一些未完成的功能/事情
    {
      "tag": "TODO",
      "color": "#fff",
      "backgroundColor": "#ff7c00"
    },
    // hack: 表示一个功能虽然实现, 但是后续可能会存在问题
    {
      "tag": "HACK",
      "color": "#fff",
      "backgroundColor": "#ff7c00"
    },
    // fixme: 修复我, 表示已经实现但不完美的功能/需要修复
    {
      "tag": "FIXME",
      "color": "#fff",
      "backgroundColor": "#ff4757"
    },
    // bug: 表示一个功能存在问题
    {
      "tag": "BUG",
      "color": "#fff",
      "backgroundColor": "#ff4757"
    }
  ],

  // ================================================================
  // ErrorLens
  // ================================================================
  "errorLens.fontFamily": "JetBrains Mono",
  // 是否使用斜体
  // "errorLens.fontStyleItalic": true,
  "errorLens.fontWeight": "500",
  "errorLens.margin": "20px",
  "errorLens.messageTemplate": "$severity：$message ($source) $count",
  "errorLens.removeLinebreaks": false,
  "errorLens.gutterIconsFollowCursorOverride": false,
  // 启用的错误提示等级
  "errorLens.enabledDiagnosticLevels": ["error", "warning"],

  // ================================================================
  // Prettier
  // ================================================================
  "prettier.printWidth": 100,
  "prettier.semi": false,
  "prettier.singleQuote": true,
  "prettier.trailingComma": "all",

  // ================================================================
  // Formatter | 指定文件类型指定格式化方式
  // ================================================================
  // 保存时是否格式化
  "editor.formatOnSave": true,
  // 所有文件都使用这种方式进行格式化
  // "editor.defaultFormatter": "esbenp.prettier-vscode",
  "[javascript][jsonc][vue][typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },

  // ================================================================
  // paramHints
  // ================================================================
  "javascript.inlayHints.parameterNames.enabled": "none",
  "typescript.inlayHints.parameterNames.enabled": "none",
  "javascript.inlayHints.parameterTypes.enabled": false,
  "typescript.inlayHints.parameterTypes.enabled": false,
  "editor.inlayHints.enabled": "onUnlessPressed",

  // ================================================================
  // Eslint
  // ================================================================
  // "eslint.validate": ["javascript"],
  // "eslint.options": {
  //   // 指定全局配置文件, 会覆盖优先于本地配置
  //   "overrideConfigFile": "/Users/feng/.vscode/.eslintrc.js"
  // },
  // "eslint.format.enable": true,
  // "eslint.quiet": true,
  // "eslint.alwaysShowStatus": true,

  // ================================================================
  // other
  // ================================================================
  // 是否开启语法校验检查
  "js/ts.implicitProjectConfig.checkJs": true,
  "docker.images.label": "Tag",
  "vsicons.dontShowNewVersionMessage": true,
  "security.workspace.trust.untrustedFiles": "open",
  // 文件类型语言模式映射
  "files.associations": {
    ".zimrc": "shellscript"
  },
  "cSpell.enableFiletypes": ["vimrc"],
  "cSpell.userWords": [
    "colour",
    "easymotion",
    "hlsearch",
    "incsearch",
    "peachpuff",
    "Vitesse",
    "zimfw",
    "zmodule"
  ]
  // "px-to-vw.viewportWidth": 375,
  // "px-to-vw.unitPrecision": 2,
  // "less.compile": {
  //   "outExt": ".css"
  // },
}
